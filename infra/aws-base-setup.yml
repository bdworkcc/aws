AWSTemplateFormatVersion: '2010-09-09'
Description: 'Reusable VPC with Public/Private Subnets and EC2 Instances'

Parameters:
  # VPC Parameters
  VPCCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for VPC
    
  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: CIDR block for Public Subnet 1
    
  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: CIDR block for Public Subnet 2
    
  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.10.0/24'
    Description: CIDR block for Private Subnet 1
    
  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.11.0/24'
    Description: CIDR block for Private Subnet 2
  
  # EC2 Instance Parameters
  InstanceAMI:
    Type: String
    Default: 'ami-0c55b159cbfafe1f0'
    Description: AMI ID for EC2 instances
    
  InstanceType:
    Type: String
    Default: 't2.micro'
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type
    
  EBSVolumeSize:
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 1000
    Description: Size of EBS volume in GB
    
  EBSVolumeType:
    Type: String
    Default: 'gp3'
    AllowedValues:
      - gp2
      - gp3
      - io1
      - io2
    Description: EBS volume type
    
  DeployPublicInstance:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Deploy EC2 instance in public subnet
    
  DeployPrivateInstance:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Deploy EC2 instance in private subnet
  
  # Security Group Parameters
  SSHAllowedCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block allowed for SSH access
    
  HTTPAllowedCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block allowed for HTTP access
    
  HTTPSAllowedCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block allowed for HTTPS access
    
  KeyName:
    Type: String
    Description: EC2 Key Pair name for SSH access
    Default: ''
    
  EnableTerminationProtection:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable termination protection for EC2 instances

Conditions:
  CreatePublicInstance: !Equals [!Ref DeployPublicInstance, 'true']
  CreatePrivateInstance: !Equals [!Ref DeployPrivateInstance, 'true']
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet-2'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-2'

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-RT'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-RT'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Public Instances
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-Public-SG'
      GroupDescription: Security group for public instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAllowedCidr
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPAllowedCidr
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPSAllowedCidr
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-SG'

  # Security Group for Private Instances
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-Private-SG'
      GroupDescription: Security group for private instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: SSH from public instances
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref PrivateSecurityGroup
          Description: Allow all traffic from same security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-SG'

  # Public EC2 Instance
  PublicInstance:
    Type: AWS::EC2::Instance
    Condition: CreatePublicInstance
    DeletionPolicy: Delete
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      DisableApiTermination: !Ref EnableTerminationProtection
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: !Ref EBSVolumeType
            DeleteOnTermination: true
            Encrypted: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Instance'

  # Private EC2 Instance
  PrivateInstance:
    Type: AWS::EC2::Instance
    Condition: CreatePrivateInstance
    DeletionPolicy: Delete
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      DisableApiTermination: !Ref EnableTerminationProtection
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: !Ref EBSVolumeType
            DeleteOnTermination: true
            Encrypted: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Instance'

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-Public-Subnet-1-ID'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-Public-Subnet-2-ID'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-Private-Subnet-1-ID'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-Private-Subnet-2-ID'

  PublicSecurityGroupId:
    Description: Public Security Group ID
    Value: !Ref PublicSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-Public-SG-ID'

  PrivateSecurityGroupId:
    Description: Private Security Group ID
    Value: !Ref PrivateSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-Private-SG-ID'

  PublicInstanceId:
    Condition: CreatePublicInstance
    Description: Public Instance ID
    Value: !Ref PublicInstance
    Export:
      Name: !Sub '${AWS::StackName}-Public-Instance-ID'

  PublicInstancePublicIP:
    Condition: CreatePublicInstance
    Description: Public Instance Public IP
    Value: !GetAtt PublicInstance.PublicIp

  PrivateInstanceId:
    Condition: CreatePrivateInstance
    Description: Private Instance ID
    Value: !Ref PrivateInstance
    Export:
      Name: !Sub '${AWS::StackName}-Private-Instance-ID'

  PrivateInstancePrivateIP:
    Condition: CreatePrivateInstance
    Description: Private Instance Private IP
    Value: !GetAtt PrivateInstance.PrivateIp
